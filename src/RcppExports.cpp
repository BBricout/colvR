// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_test_nlopt
bool cpp_test_nlopt();
RcppExport SEXP _colvR_cpp_test_nlopt() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_test_nlopt());
    return rcpp_result_gen;
END_RCPP
}
// Elbo_grad_Rcpp
Rcpp::List Elbo_grad_Rcpp(const Rcpp::List& data, const Rcpp::List& params);
RcppExport SEXP _colvR_Elbo_grad_Rcpp(SEXP dataSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(Elbo_grad_Rcpp(data, params));
    return rcpp_result_gen;
END_RCPP
}
// Elbo
Rcpp::List Elbo(const Rcpp::List& data, const Rcpp::List& params);
RcppExport SEXP _colvR_Elbo(SEXP dataSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(Elbo(data, params));
    return rcpp_result_gen;
END_RCPP
}
// Grad
Rcpp::List Grad(const Rcpp::List& data, const Rcpp::List& params);
RcppExport SEXP _colvR_Grad(SEXP dataSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(Grad(data, params));
    return rcpp_result_gen;
END_RCPP
}
// nlopt_optimize_ZIP
Rcpp::List nlopt_optimize_ZIP(const Rcpp::List& data, const Rcpp::List& params, const Rcpp::List& config);
RcppExport SEXP _colvR_nlopt_optimize_ZIP(SEXP dataSEXP, SEXP paramsSEXP, SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(nlopt_optimize_ZIP(data, params, config));
    return rcpp_result_gen;
END_RCPP
}
// Elbo_grad_logS_Rcpp
Rcpp::List Elbo_grad_logS_Rcpp(const Rcpp::List& data, const Rcpp::List& params);
RcppExport SEXP _colvR_Elbo_grad_logS_Rcpp(SEXP dataSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(Elbo_grad_logS_Rcpp(data, params));
    return rcpp_result_gen;
END_RCPP
}
// nlopt_optimize_ZIP_logS
Rcpp::List nlopt_optimize_ZIP_logS(const Rcpp::List& data, const Rcpp::List& params, const Rcpp::List& config);
RcppExport SEXP _colvR_nlopt_optimize_ZIP_logS(SEXP dataSEXP, SEXP paramsSEXP, SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(nlopt_optimize_ZIP_logS(data, params, config));
    return rcpp_result_gen;
END_RCPP
}
// cpp_test_packing
bool cpp_test_packing();
RcppExport SEXP _colvR_cpp_test_packing() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_test_packing());
    return rcpp_result_gen;
END_RCPP
}
// MatrixToVector
Rcpp::NumericVector MatrixToVector(const arma::mat& matrix);
RcppExport SEXP _colvR_MatrixToVector(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(MatrixToVector(matrix));
    return rcpp_result_gen;
END_RCPP
}
// VectorToMatrix
Rcpp::NumericMatrix VectorToMatrix(const arma::vec& vector, int n, int p);
RcppExport SEXP _colvR_VectorToMatrix(SEXP vectorSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type vector(vectorSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(VectorToMatrix(vector, n, p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_colvR_cpp_test_nlopt", (DL_FUNC) &_colvR_cpp_test_nlopt, 0},
    {"_colvR_Elbo_grad_Rcpp", (DL_FUNC) &_colvR_Elbo_grad_Rcpp, 2},
    {"_colvR_Elbo", (DL_FUNC) &_colvR_Elbo, 2},
    {"_colvR_Grad", (DL_FUNC) &_colvR_Grad, 2},
    {"_colvR_nlopt_optimize_ZIP", (DL_FUNC) &_colvR_nlopt_optimize_ZIP, 3},
    {"_colvR_Elbo_grad_logS_Rcpp", (DL_FUNC) &_colvR_Elbo_grad_logS_Rcpp, 2},
    {"_colvR_nlopt_optimize_ZIP_logS", (DL_FUNC) &_colvR_nlopt_optimize_ZIP_logS, 3},
    {"_colvR_cpp_test_packing", (DL_FUNC) &_colvR_cpp_test_packing, 0},
    {"_colvR_MatrixToVector", (DL_FUNC) &_colvR_MatrixToVector, 1},
    {"_colvR_VectorToMatrix", (DL_FUNC) &_colvR_VectorToMatrix, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_colvR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
